자료구조 10주차 이론-2

지난시간.

PQ의 3가지 sort방법
selection sort -> 배열기반
insertion sort -> 배열기반
heap sort -> 완전이진트리 -> 벡터기반

heap은 2가지 조건을 만족하는 data structure.
구조조건 -> 완전이진트리여야함
순서조건 -> min heap에서 위로 올라갈수록 key값이 작아져야한다. (ppt에 작거나 같다 라고 나와있지만 편의상 작아져야라고한다.)

last node을 추적하는게 중요했지만, 벡터기반으로 구현했을 때 쉽게 해결되었다.

insertion시, 
구조조건 : 원래 last node 다음에 매달아주는게 O(1)시간
순서조건 : upheap 프로시젼. O(logn) 시간.
-> total O(logn) 시간

deletion시,
구조조건 : last node의 데이터를 root 노드 자리에 넣는다. (root 노드 데이터는 지움). O(1)시간
순서조건 : downheap 프로시젼.O(logn) 시간
-> total O(logn) 시간

last node update 알고리즘이 따로 있지만, 그냥 참고만.
왜냐하면 벡터(배열)로 구현하면 단순해지니까.

따라서, PQ를 heap으로 구현하면
insert 때 O(nlogn),
removeMin O(nlogn)이므로
총 O(nlogn)시간. 이것이 heap sort

-> insertion sort나 selection sort는 O(n^2)시간이었다.
데이터 개수, 특성에 따라서 다르지만,
충분히 크다면 heap sort가 대단히 빠르다.

vector-based(array-based)로 구현한 heap.
배열로 구현했을때, 포인터를 저장안해도되므로, 공간적인(메모리)이득이 많이 있다. (물론 포인터메모리크기의 합이 배열의 남는공간보다 작으면 아니겠지만)
배열로 구현시 heap sort도 in-place로 구현가능 -> 저번영상 참고 (마지막즈음)

-------------------------------------------------------------------

p.22
힙 두개 합치기
heap sort 알고리즘을 업그레이드 해보자.

heap 2개와 1개의 key가 주어졌을 때(입력) (+ 추가로 full binary tree라고 가정)
입력을 다 합친 heap 1개 생성(출력) -> 얘도 full binary tree가 된다.

알고리즘.
- key를 루트로 만들고, : O(1)
루트의 왼쪽 자식, 오른쪽 자식에 각각 힙을 매달아준다.
- root 노드에 대해 downheap 실행 : O(logn)

-> 총 O(logn)

p.23
위 알고리즘을 Bottom-up Heap Construction 이라는 작업에 사용한다.

즉, 힙을 '생성'할 때, n번 삽입하여 만들수도 있지만
merge를 이용하여 재귀적으로 적용하여 heap을 생성할 수 있다.

p.24~26
예) 15개의 원소를 주고, 힙으로 만들어라.
그 원소를 배열로 주었다. (0번 인덱스는 비었음, 1~15번에 데이터)
이 배열을 heap으로 sorting 해주세요!
-> heap sort를 사용하려면 heap으로 바꿔야하는데,
각각의 원소에 대하여 heap인 구조에 넣어도 되지만,
이 배열 자체를 heap으로 만들어보자..!

입력을 배열로주면, 완전이진트리를 하나 준거랑 마찬가지이다!!
즉 구조조건은 이미 맞춰진것. -> 순서조건만 만족시켜주면 되는데,
순서조건을 heap merge 방법을 이용하여 만족시켜주면 된다.

방법.
일단 full binary tree라고 가정하고 시작. (별다를것 없음)
- n개의 원소가 있을때 n/2개의 각각 원소를 크기가 1인 힙으로 생각.
2개씩 짝짓고, key 원소 하나를 주어줘서 heap merge 진행.
- 새로 생성된 heap 들에 대해, 반복적으로 heap merge 진행.

(약 3시 50분부터 heap merge 설명 다시 듣기)

예를들어 크기가 32인 배열(0~31)이 주어져있고, 31개의 원소가 들어있을때
16번부터 31번 원소들을 각각 크기가 1인 heap.
그이후 16번과 17번을 merge하는데 8번 원소를 parent로 하고 down heap진행.
그이후로도 같다

p.28
수행시간 분석.
1번 downheap을 진행할때마다 비교연산 2번.

최악의 경우를 생각해보자.
루트노드를 예로들었을때, 어느 경로로 가건 leaf까지가는 경우가 최악의 경우이다.
이 leaf까지 내려가는 경로를 최초 오른쪽으로 한번가고 그이후엔 왼쪽으로 간다고 생각해보자.
최악의 경우이므로, 루트노드의 왼쪽자식과 오른쪽 자식들도 각각 downheap에 의해 leaf로 내려가야하므로

총 비교연산수가 2n번이므로 O(n)이다.
즉 -> 아무렇게나 생기는 배열을 heap인 배열을 만드는데 걸리는 시간.

즉, 앞에서 heap의 insert 연산이 O(nlogn)이었는데, bottom-up heap construction을 사용하면 O(n)으로 더 빠르게 만들 수 있다!























































