3주차 이론-2

1.
한학기내내 할것
1.ADT
2.구현
3.성능

우리가 배울 대부분의 자료구조는 추상자료형(ADT)이다.
추상자료형의 특징? 어떤 연산을 하나? 를 설명할 것
ADT는 기능들에 대한 '명세'이다.
대부분의 데이터에 대해 그 기능은 주로 탐색,삽입,삭제 이다.
스택에서는 탐색이 top, 삽입이 push, 삭제가 pop 이었다.
LIFO (last in fist out)

top은 argument가 없다.
top이 호출되면 꼭대기에 누가있느냐 return 해줌.
그러나 top에 있는 element를 없애거나 바꾸지 않는다.

push...

pop...

이게 명세가 되고나면 구현해야한다.

구현방법
1. 연속된 메모리주소 저장하는 방법 : 배열
2. 그때그때~ linked list(linked structure)


8.
구현에 대한 내용
STL의 vertor을 이용하면 Stack과 같은 자료구조를 쓸 수 있지만..
우리는 배워야하니까~

Array로 구현한 스택.

알고리즘을 구현하는 방법 -> 여러 컴퓨터 언어들, 수도코드 ...
=> but 우리는 수도코드로만 해도 충분. 이론분석만 할거기 때문.

pop 구현이 굳이 t자리에 있는 데이터를 지우지 않고
t를 t-1로만 바꾼다.
t-1로 되었을 때 어차피 t-1 밖에 있는 데이터에 대해서 접근할일이없고
새로운 자료가 들어오면 덮어쓰면되기 때문

성능분석도해보자. 점근분석에의해.
1. size()함수의 수행시간
t+1인데 t를 알고 있으니 O(1)
2. empty()도 O(1)
3. pop()도 O(1) (다 더했을 때)

9. 
마지막 push연산
if는 element가 꽉 찼을 때, 더이상 insert 할 수 없기 때문에
StackFull이라는 exeption을 thorw한다.

수행시간은
if에 대해서 O(1), else에 대해서도 O(1)이다. -> 따라서 push : O(1)

==>따라서 element가 몇개던간에 모든 기능들이 수행시간이 O(1)이다.
매우 효율적이며, 따라서 스택은 배열로 구현하는것이 좋겠다~~

10.
정리.
인풋이 n
공간은 O(N)
모든 operation은 런타임이 O(1)
한계.
-미리 stack의 크기가 define되어야한다.
-스택이 꽉찼을때 insert가 되었다면 그때의 예외상항은 구형방법에따라 다르다.

*vector.
배열의 크기는 못늘리는게 맞지만,
큰 배열을 할당을 다시하면 된다.
(421강의실이 꽉찼다 -> 409로 다옮겨~ -> 409를 다시 자료구조 강의실로 지정하면 된다. => 이것이 verctor)
-> 스택입장에서는 꽉차도 사이즈 늘릴 수 있는 것.
스택을 배열로 구현했기때문에, 스택은 배열의 상위개념

스택끝.

링크드리스트 설명.
링크드리스트로 stack 구현.
링크드리스트로 size, empty, push, pop, top을 만드는게 구현하는것
1. 새로운 element를 head에 넣을지, tail에 넣을지 -> 어느곳이 top이 될 것이냐 결정하자.
그런데 top에서는 insert도 이루어지고 delete로 이루어져야한다.
스택은 데이터가 들어오고 나오는문이 top으로 같다.

그런데 tail에서는 삭제연산이 효율적이지 않다. (지난번에 잠깐 배웠듯이,,)
head에서는 삽입, 삭제 둘다 효율적.
따라서 top은 head로 해야한다.

object pop()연산시
int a;
node* tmp;   // return값을 받기 위한 노드형 포인터
tmp = top;
a = tmp->data;
top = top->next;

delete tmp                  => 가비지 컬렉션
(//  지금 이 수도코드 정확할지 모름ㅋㅋ)

즉 노드형포인터변수인 tmp를 만든다음에
그 tmp를 delete시키면 가비지 컬렉션이 된다.

메모리를 할당하고 해제하는 것에 때문에 배열이 더 구현이 단순하지만,
그만큼 링크드리스트는 필요한만큼만 메모리를 할당받기때문에
더 효율적일 수 있다.

여하튼 링크드리스트도 모든 연산이 O(1)시간이다.

즉 스택은 배열, 링크드리스트 어느것으로 구현해도 O(1) time.