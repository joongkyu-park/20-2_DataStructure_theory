3주차 이론 - 1

지난시간.

점근분석(asymptotic algoritm analysis) 정리
알고리즘 하이레벨 디스크립션 -> 수도코드
-> 수도코드에서 수행되는 프리미티 오퍼레이션 개수를 센다.
-> 최악의경우라고 가정하면 인풋크기 n에 관한 함수가나온다
->그거를 big oh 표기법으로 표현한다.

본시간.
ADT(Abstract Data Type)

2. 
ADT : 추상자료형
우리가 배우는 자료구조는 대부분 추상자료형이다.
추상자료형 : 자료구조의 추상화.
즉, 자료구조에 대한 '명세(specification)'이다. 각 자료구조별로 이러이러해야 해야된다고 규정해놓은것.
명세해야할것 : 
1)Data stored: 저장할 자료(외부적으로 보이는 자료, 내부적인 자료)
2)Operation on th data: 그 자료에 대한 기능수행. ex)삽입,삭제,탐색 ...
+) 예외에 대한 핸들링 방법

추상자료형이 구현된 것이 클래스(객체)이다.

핵심 : 기능만을 명세한다. 
But, 과정, 성능을 명세하지 않는다. How를 명세하지 않는다. 내부적으로 어떻게 만들었는지 명세X.
무엇으로 구현을 했느냐? 가 추가되어야 성능을 알 수 있는 것이다.
ex)'스택'을 '배열'로 '구현'했을때 성능시간이 ~~이다. --> O

명세만 가지고 작용한다. 안쪽을 들여다볼 수 없다.

3.
Stack(스택).
임의의 object를 저장한다.
저장할 자료의 타입은 다를 수 있지만 스택에 대해 수행되는 기능은 같다.
=> Last-in, First-out

4. 
구현해보자
C++로 생각하면 adt가 구현되어있는 클래스 라고 생각하자.
typename E라는 데이터를 담는 스택. 클래스.

5.
Exceptions : 명세하지 않는 상황에 대한 처리를 해야될 필요가 있는 상황

6.
스택의 이용.
최근에 진행했던 상황으로 돌아가는것.
ex) 웹브라우저에서의 뒤로가기, 에디터프로그램에서의 실행취소 등

그 자료구조 자체로 쓸 수도 있지만
다른 큰 자료구조의 하나의 component로 쓰일수도 있다.

7.
스택의 또다른 예시.
c++(또는 대부분의 proram language도 마찬가지)의 런타임 스택.
main함수 -> foo함수 -> bar 함수 ...
main작업대 위에 foo 작업대 위에 bar 작업대.. 작업끝나면 작업대빼고. 그전 작업 . . .
예를 들어 foo함수를 실행하는데 bar함수를 만나서 bar함수를 진행할때,
bar함수가 끝나고 foo함수로 돌아왔을 때 어디까지 작업했었나, 를 알아야하기 때문에 지역변수, return 값, prongram counter 같은게 필요하거나 잘 알아놔야한다.

또 재귀함수(recursion)같은 경우에도 스택이 사용.

8.
여기부터 '구현'부분.
다음시간에.


*우리의 목표*
1. adt를 잘 설명하고, 구현방법을 설명하고
2. 성능을 분석하고