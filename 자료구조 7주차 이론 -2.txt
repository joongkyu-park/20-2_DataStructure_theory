자료구조 7주차 이론 - 2

binary tree

p.10
주의해야할점
n = e + i이고
e = i + 1이다.

n은 약 i의 2배이다 (약 n = 2i)

h<= i 와  ............. 1번식
h>= log2(n+1) - 1    .............. 2번식

1번식과 2번식을 합치게되면

log2(n+1)-1<= h <= i 가 된다.

거기에 internal 노드의 개수 = data가 들어가 들어가 있는 노드의 수이라면, i를 n이라고 하면
==> log n <= h <= n
즉 h는 log n 보다 작을 수 없다!!! (스샷확인)


p.11 
Binary Tree ADT
바이너리 트리는, 트리 adt의 스페셜 케이스이므로
트리 adt의 모든 속성을 계승받는다.

추가적인 method로, 왼쪽자식과 오른쪽자식을 access할 수 있는데 메소드인
position p.left(), position p.right() 가 필요.

proper bianry tree : 자식 노드가 0아니면 2
자식노드가 0이면 단말노드.

p.12
알고리즘
preorder traversal, postorder traversal 말고
바이너리 트리에만 적용할 수 있는 또다른 traversal
Inorder Traversal.

그림에 preorder traversal를 한번 해보자
바이너리 트리에선 자식노드에 대한 순서가 암묵적으로 왼쪽->오른쪽
6 2 1 4 3 5 8 7 9

이번엔 postorder
1 3 5 4 2 7 9 8 6

이번엔 inorder을 해보자.
1 2 3 4 5 6 7 8 9

inorder traversal은 바이너리 트리를 적절히 그리는 데에 이용된다.
1. x좌표 y좌표로 나타냈을때, 각 노드의 x좌표는 유일함. (y좌표는 겹쳐도됨)
그때의 x좌표는 inorder traversal의 순서.
2. y좌표는 해당노드의 depth.


p.13
그전에는 binary tree로 수식을 저장할 수 있었고,

지금은 inorder traversal을 이용하여 수식표현(print)하기.
¬ 기호는 논리기호로 not이라는 뜻. (부정)

p.14
이번엔 수식을 계산하기, postorder로!

p.15
오일러 투어 라는 traversal.

일반적인 바이너리 traversal 이다.
각 노드를 쭈욱 돌아서 방문한다고 생각하면 된다.
각 노드가 기둥이고 선들이 성벽이라고 생각. 루트기둥부터 왼쪽으로 기둥들을 방문하기 위해 쭈욱 한 바퀴 도는거.

인터널 노드를 처음방문했을때는 preorder처럼, 두번째 방문때는 inorder처럼, 세번째 방문때는 postorder처럼 된다.

p.17
바이너리트리의 구현.
아주 심플하다.
마치 doubly linked list에서 하나 더 확장한 느낌.

노드변수에는 element, 부모노드, 왼쪽자식, 오른쪽자식 을 저장하는 필드가 있다.

바이너리 트리의 구현으로 일반 트리 구현하기 (그림판 스샷)
left child 필드 : 해당 노드의 첫번째 자식노드
right child 필드 : 해당 노드의 첫번째 형제노드

일반 트리 T를 바이너트리 T' 재구성.

문제점.
T'(바이너리트리)로 구현했을 때,

A노드의 모든 자식들을 출력할 수 있나? 즉 children( )구현 가능한가
=> ex) A의 children을 호출 할때,
첫번째 자식인 B를 호출하고 그 이후에 right child 필드가 없을 때 까지 출력

D노드의 parent를 찾을 수 있나? 
=> ex) D의 parent 필드에는 C가 있는데, C의 right child필드가 D이면 진짜 부모가 아니고 C의 left child 필드로. 
이렇게 쭉가다가 left chidl 필드가 없을 때 그 때 노드(B)의 parent 필드의 노드가 진짜 parent.

p.18
바이너리 트리의 구현.
complete Binary tree 일때, array를 이용하여 구현할 때 오히려 더 효율적이다.

그림처럼 노드에 번호를 붙이는데,
루트노드 번호는 1.
그 노드가 왼쪽 자식이면 부모번호x2
오른쪽 자식이면 부모번호x2 + 1

어떤 자식의 부모번호는 본인번호/2 (나머지는 버림).

완전이진트리(complete binary tree) : 노드가 생성될 때, 뎁스가 깊어질 때 왼쪽부터 생성해나가는것 (?)





















