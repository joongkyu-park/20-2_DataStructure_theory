자료구조 4주차 이론 -2

지난 시간.

queue에서의 탐색 : front에 있던(queue에 가장 오래있던) element 반환
삽입 : enqueue
삭제 : dequeue, front에 있던 element 삭제
그이후로 size, empty

array-based queue
circular fashion을 위해서는 mod(나머지연산)을 이용한다.
front와 rear이용.

배열의 크기가 N일때
성능은 모두 O(1).

queue with a singly linked list
head에서의 삽입삭제 -> O(1)
그러나 tail에서의 삭제는 -> O(n)이므로,
tail이 rear가 되어야하고 head가 front가 되어야한다.
그러면 삽입 삭제 모두 O(1).

dequeue 시, front노드를 tmp로 옮기고 garbege collect로 옮겨줘야한다.


벡터와 어레이 리스트
(Vectors or Array Lists)

(STL의 벡터와는 비슷하지만 조금 다른)

p.2
Vector adt란, array의 확장버전. 2차원 배열 느낌.
그 모양때문에 array list라고도 불린다.
배열로 구현해야 굉장히 심플하고 자연스럽다.
index를 이용하여 접근한다.

벡터는 탐색, 삽입, 삭제 연산말고 '갱신'이라는 연산도 추가된다.

탐색 : at
갱신(update) : set
삽입 : insert
삭제 : erase, 개념적으로 index가 i인 자료를 삭제하면 그 앞에있는 element들의 index를 1씩 다 감소해야한다. 개념적으로만. 논리적으로는 x

자기 집합내의 특정 원소를 접근할때,
배열의 access는 index로
링크드리스트의 access는 pointer(주소를 직접)로

벡터는 index로 접근하므로, 배열로 구현해야 '자연스럽다'
링크드리스트로 구현을 못하는 것은 X


p.3

p.4
구현.
array-based가 자연스럽다.
탐색, 갱신연산 O(1)

p.5
중간에 새로운 element를 삽입할 때
나머지 element를 shifting 해야하므로,
worst case에 O(n)타임 소요.

즉, insert 연산에서 worst case에 O(n)이 걸린다.

p.4에서의 set연산에서,
이 vertor가 sorted된 sequence라고 하면,
i index에 o data를 갱신시켰을 때
그 자리가 맞는 자리인지 모르므로
sorting 시키려면, worst case에 O(n)이 걸린다.

즉, set자체는 O(1)타임이지만
데이터 스트럭쳐의 일관성에 의하여 추가적인 시간이 필요할 수 있다는 뜻.

p.6
erase. 
마찬가지로 worst case에 O(n)시간

p.7
배열로 벡터를 구현할 경우
space는 배열을 만들 때의 고정크기인 N일것이고
insert erase는 O(n)시간,
size empty at set은 O(1)시간

-> 비효율적이다,라는 생각보다
삽입과 삭제가 잘 안일어나는 애플리케이션에 사용하면 되겠다.

환형구조로 만들면, insert와 erase를 O(1)으로 만들 수 있다.

insert 수행시, 배열이꽉찼을때 exception을 보내는게아니라 배열의 크기를 늘릴 수있다

p.8 이것이 growable array-based vector
크기가 큰 새로운 배열로 옮긴다.
1. incremental srtrategy
2. doubling stratedgy






