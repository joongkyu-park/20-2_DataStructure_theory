자료구조 8주차 이론 -1

지난시간.
Properties of Proper Binary Trees.
h와 i(데이터 노드만 생각한다면 i를 n으로 보는경우도)의 관계.

바이너리트리 adt는 Tree adt의 모든 메서드들을 포함하고
추가적으로 position p.left(), postion p.right()가 있다.

바이너리트리도 트리니까 preorder traversal, postdorder traversal을 할 수 있지만 추가적으로 inorder traversal도 할 수 있다.
inorder traversal로 여러 문제를 해결할 수 있었다.
- 좌표평면에 바이너리트리를 그리고 싶은데, y축에 나란한 직선에는 노드가 딱하나만 존재하도록할때 이용
이때 해당노드가 처리되는 순서를 x(v),
해당 노드의 깊이를 y(v).
- 이전에 바이너리를 트리를 이용해 수식을 저장했다.
저장한 수식을 화면에 프린트할 때 이용.
- 그 수식의 값을 실제 계산할 때 postorder traversal을 이용한다.(specialization of a postorder traversal)
- 오일러 투어 traversal.

바이너리를 트리를 linked list로 구현

p.18
바이너리 트리를 배열로 구현.
아무 트리나 배열로 구현하지않고, 규칙이 있는 트리를 배열로 구현하는데, 그중에서도 complete binary tree(완전이진트리)일 경우 배열로 구현한다.
그 규칙은, 노드번호(rank of node)에 있다
노드 v가 있을때,
왼쪽 자식의 노드번호 = 2*v
오른쪽 자식의 노드번호 = 2*v+1
부모의 노드번호 = floor(v/2)
=> 따라서 link가 없어도 다음과같은 규칙때문에 상수시간내에 부모, left child, right child를 찾아낼 수 있었다.
오히려 4byte공간 3개를 안썼다.
따라서 만약에, 처음에 지정한 배열의 크기에 꽉차는, 비어있는 공간이 없는 complete binary tree라면 오히려 배열이 더 좋을수도 있다.


바이너리 트리 끝---------------------------------------------------

Priority Queues.
내가 어떤 서비스를 받을때 5번째에 줄섰다고 꼭 5번째에 서비스를 받지 않을 수 있다. 우선순위에 따라서 일부 조정이 될수있다. (ex) 응급환자, 노약자 등)
지난번에 배웠떤 queue는 서비스를 받는 기준이 '시간'이었다.
도착한 시간. 기다렸던 시간.
그 시간이 크면 우선순위가 컸던거고, 시간이 짧으면 우선순위가 낮았던 것.
실제로 priority는 나이가될수도있고 돈이될수도있고 등등 여러 기준이있다. -> priority queue를 유지하기위해선 그 priority가 사람마다, 물질마다, 객체마다 누가더 큰지작은지 비교가능해야한다.

p.2
priority queue는 다른 data structure와 마찬가지로 데이터를 저장한다.
entry : 두 데이터의 페어. 하나는 key라는 데이터, 하나는 value라는 데이터.
value는 그 객체가 가지고있는 다양한 정보들.
key는 객체의 특징을 나타내는, 대표하는 데이터. 특징을 나타내기 때문에 보통은 유일한 경우가 많이 있다. (ex)학번, 이름(중복될 수 도있지만 중복을 허용하는 공유도있음) 등등)
이 두개를 합쳐서 entry 또는 item이라고 부른다.
이때 key를 이용해서 우선순위를 판단한다.

탐색연산 : min() - 키값이 최소인 데이터를 찾아라. 작을수록 우선순위가 높은 큐.
근데 클수록 우선순위가 높을수도 있지않나?
PQ에는 두가지가 있다.
1. min PQ : 최소우선순위큐 (key값이 작을수록 우선순위높음)
2. max PQ : 최대우선순위큐 (key값이 클수록 우선순위높음)
동일하지만 부등호만 다른거.

ppt에서는 min PQ으로 한다.

삽입연산 : insert(e) - 임의의 엔트리 e를 pq에 넣는다.
삭제연산 : removeMin() - minimum을 저장한 객체를 삭제. (max PQ였다면 removeMax()였겠지)
앞으로 특별한 말이없으면 min PQ를 가정한 것이다.

이용방법 : 비행기 탑승대기자들, 경매, 주식시장 등

p.3
PQ를 이용하여 sorting을 할 수 있다.
내가 PQ에 시험지를 n개 넣는다.
PQ 내에서는 어떻게 구현되는 지모름.
그리고 removeMin을 n번하면, 오름차순으로 점수가 낮은사람부터 높은사람까지 sorting되서 나오겠다.
러닝타임은 내부에서 PQ를 어떻게 구현하느냐에따라 달라진다.

수도코드.
매개변수는 sequence S와 데이터를 대소판별을 할 수있는 function이나 operatior인 C를 넣는다.
output은 C에의해 오름차순으로 정렬된 sequence S이다.
S에 있는 데이터를 PQ방은 P로 먼저옮기고,
P에서 정렬된 데이터들을 다시 S로 옮긴다.

p.4
구현방법
sequence형태로 구현해보자. (sequence는 linked list아니면 배열)
우선 linked list로 구현 가정 (4-5-2-3-1)
i) linked list가 unsorted일 때.
  1. insert로 S->P 옮긴다. (그냥 copy)
  하나 옮길때 O(1)이므로 데이터가 n개라고하면
  총 O(n)이 걸린다.
  (4-5-2-3-1 그대로 카피)
  2. min이라는 comperator를 하나 두고, removeMin을 통해 다시 S로 하    나씩 옮겨준다.
  (1-2-3-4-5)
  min을 찾을 때 비교횟수가 처음엔 n-1, n-2, n-3 , ... , 1 이므로 모두 더하면 시간은 총 O(n^2)이 걸린다.

=> 1단계와 2단계를 합쳐 토탈 O(n^2)이 걸린다.

2) sorted일때
  1. S->P로 옮길때 매번 비교연산을 해서 sorted된 형태로 만든다.
  4
  4 5
  2 4 5
  2 3 4 5
  1 2 3 4 5
  와 같이.

  i번째 원소를 옮길때,
  worst case : 앞서 옮긴 i-1개의 원소보다 다 작을경우, i-1번 비교함.
  best case : i번째 원소가 제일 크다면 앞서 옮긴 sorting된 원소중 마지막 원소랑만 비교해서 i번째 원소가 크다면 i-1개의 원소보다 큰게 증명되므로 1번만 비교.
  여하튼 worst case로 계산해야하므로 비교횟수는
  1+2+...+ i-1 + i + .... + n-1 이므로 총 n(n-1)/2 이고 따라서 O(n^2)시간이 걸리게된다.

  2. sorting되었으니 그냥 다시 S로 copy만 하면되므로 O(n)
=> 토탈 O(n^2)시간

==> sorted linked list이던 unsorted linked list 이던 O(n^2)으로 같다.

p.5
이 때, unsorted linked list일때를 Selection-Sort라고 한다.
이전에선 S->P로 그대로 한번 옮기고, P->S로 sorting하여 옮기는 두번의 과정을 거쳤는데,
실제 selection sort는 첫번째의 copy하는 불필요한 작업은 거치지 않는다.
S를 입력받을때 바로 알고리즘을 돌려서 sorting 시킴

p.6
selection sort(선택정렬) 예시

버블소트와는 조금 다름. 버블소트는 마치 버블처럼 실제 minmum가 위로올라감. 메모리 위치를 바꿈.
하지만 선택정렬은 바꾸지않고 가만히 있는다. minmum이 어디있는지만 알면된다.
(원래는 phase 2만 함 그러나 PQ관점에서 두단계)

p.7
PQ sort에서 priority queue가 sorted sequence로 구현되어있을 때
Insertion-sort라고 한다. (마찬가지로 진짜 insertion sort는 PQ를 이용하지않는다. 카피를 하지 않는다는 뜻)

p.8 
Insertion sort 예시
(원래는 phase1에서 끝남 그러나 PQ관점에서 두단계)

  












































































