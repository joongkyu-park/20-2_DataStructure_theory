자료구조 5주차 이론-2

List adt 복습

position개념.
데이터가 저장되는 방법들이 다 달라지다 보니까, 
데이터가 저장된것을 통합적으로 가르키는 방법. 말그대로 위치. 
p자리에있는 요소를 반환하는 p.element() 연산만 정의, *p로 생각해도.

List는 before,after와 같은 위치기준으로 데이터를 접근.
Iterator라고하는 특별한 포지션, begin(), end()가 있다.
그 특별한 위치를 이용하는 insertFront, insertBack, eraseFront, eraseBack 이 있다.

List는 doubly linke list 로 구현하는 것이 자연스럽다.
head와 trailer라는 특별한 노드가 필요하다.

성능.
공간적인 측면에서보면 O(n) 공간을 쓰게되고
모든 연산을 O(1)에 수행 가능하다. 단 포지션을 알고 있을 때. 포지션 기반의 연산이다.

---------------

Sequence ADT

p.10
직관적으로 얘기해서, list에 vector의 기능을 추가해보자.
즉 list adt의 모든 기능을 다 포함하면서, 추가적으로 index로 access하는 기능을 추가해보자.
position을 기반으로 data를 access하는거 좋긴한데,
몇번째에 뭘 넣자 하는 연산이 자주일어나는 상황일때. (물론 begin에서 몇번째까지 계속 세가지고 할 수도 있지만.)
따라서, index와 position 두 방법 모두로 접근가능하게.

그래서 list 기반 연산들이 다 있다.
추가적으로 index로 연산하기 위해, bridge methods가 있는데
position과 index의 브릿지.
atIndex(i) : index가 i인 객체의 포지션 리턴
IndexOf(p) : position을 주면 index를 리턴.

p.11
sequence를 이용하는 application.

p.12
구현.
배열기반 구현.
공간낭비를 막기위해 circular array를 이용하자.

position object가 Element와 Index를 저장한다.
배열 요소요소에 element를 그대로 넣는게아니라, '주소값'을 넣는다.
그 주소값을 따라가면 어떤 structure가 있는데, 한 필드에는 element, 한 필드에는 index가 있는것.
즉 position를 저장하는 circular array이다.
f(first)와 l(last) 포지션을 지정하여 관리한다.
이것은 한 예시일 뿐이지, 반드시 이렇게 구현하란 것은 아니다. 다를 수 있다.
배열의 index와 sequence의 index는 다른거. (맨처음엔 같겠지만, erase나 insert 등의 함수가 한번이라도 호출되면 달라지겠지.)
그 사이의 관계 조정은 f나 l을 이용하여 한다.
ex) 구조체가 생성되고, eraseFront가 한번 연산되었을 때
f가 앞으로 한칸 당겨질껀데, f자리의 indexOf(p)를 하면 저장된 인덱스는 1일것이다. (원래 1이었으니까)
그러면 반환값은 f가 당겨진만큼, 1-1=0 으로 반환하면 실제 인덱스를 이용한다.
cicular array이므로 모듈러연산을 이용한다. 조금 복잡하겠지만..

p.13
배열로 구현했을 때, doubly linked list로 구현했을 때 성능비교.

배열로 구현했을때, 임의의 위치에서 삭제 및 삽입할 때, 삽입 삭제 후에 기존의 셀들을 뒤로 밀거나 앞으로 당겨줘야하니까 최악의 경우에 O(n)시간이 된다.
dll로 구현했을 때는, index가 들어가는 연산에 약하다.
왜냐하면 몇번째인지 알아내는 방법은 맨앞에서부터 셀 수 밖에 없기 때문. 그러다보니 atIndex, indexOf 와 같은 연산은 최악의경우 O(n).







